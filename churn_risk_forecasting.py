# -*- coding: utf-8 -*-
"""Churn Risk Forecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bNOKDbZyEsMGGBjhgCOOcobedm-Js8W4

# Importing Dependencies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBRFClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import pickle

"""# Data Loading"""

df = pd.read_csv('/content/drive/MyDrive/Datasets_for_ML_Projects/WA_Fn-UseC_-Telco-Customer-Churn.csv')

print(df.shape)

df.head()

pd.set_option("display.max_columns", None) # to show all columns using pd.head()

df.head()

df.info()

df.drop(columns=["customerID"],inplace=True)

df.head()

numerical_features_set = {"tenure","MonthlyCharges","TotalCharges"}
for col in df.columns:
  if col not in numerical_features_set:
    print(col, df[col].unique())
    print(col, df[col].unique())

df.isnull().sum()

try:
  df["TotalCharges"] = df["TotalCharges"].astype(float)
  print("Success")
except:
  print("Error")

"""There is some string values which are not null but not float"""

df[df["TotalCharges"]==" "]

len(df[df["TotalCharges"]==" "])

df["TotalCharges"] = df["TotalCharges"].replace(" ","0.0")

try:
  df["TotalCharges"] = df["TotalCharges"].astype(float)
  print("Success")
except:
  print("Error")

len(df[df["TotalCharges"]==" "])

print(df["Churn"].value_counts())

"""Class imbalancing in target column.

# E.D.A
"""

df.shape

df.columns

df.head(2)

df.describe()

"""Understanding distribution of Numerical features

## Hist Plot
"""

def plot_histogram(df, column_name):

  plt.figure(figsize=(5,3))
  sns.histplot(df[column_name], kde=True)
  plt.title(f"Histogram of {column_name}")
  plt.xlabel(column_name)

  # calculate mean and median
  mean = df[column_name].mean()
  median = df[column_name].median()

  # add mean and median to the plot
  plt.axvline(mean, color="red", linestyle="dashed", linewidth=1, label="mean")
  plt.axvline(median, color="green", linestyle="dashed", linewidth=1, label="median")

  plt.legend()
  plt.show()

plot_histogram(df, "tenure")

plot_histogram(df, "MonthlyCharges")

plot_histogram(df, "TotalCharges")

"""## Box Plot"""

def plot_boxplot(df, column_name):

  plt.figure(figsize=(5,3))
  sns.boxplot(y=df[column_name])
  plt.title(f"Boxplot of {column_name}")
  plt.xlabel(column_name)
  plt.show()

plot_boxplot(df, "tenure")

plot_boxplot(df, "MonthlyCharges")

plot_boxplot(df, "TotalCharges")

"""There are no outliers in dataset we can see from box plot"""

# correlation matrix - heatmap
plt.figure(figsize=(5,2))
sns.heatmap(df[["tenure","MonthlyCharges","TotalCharges"]].corr(), annot=True, cmap="coolwarm", fmt='.2f')
plt.title("Correlation Matrix")
plt.show()

"""Categorical Features Analysis"""

df.columns

df.info()

# object columns -> column with data type = object
object_cols = df.select_dtypes(include="object").columns.to_list()
object_cols += ['SeniorCitizen'] # adding because this is also categorical but was not object
object_cols

for col in object_cols:
  plt.figure(figsize=(10,5))
  sns.countplot(x=df[col])
  plt.title(f"Count Plot of {col}")
  plt.xlabel(col)
  plt.show()

"""# Data Preprocessing"""

encoders = {}

# apply label encoding and save the encoders
for col in object_cols:
  le = LabelEncoder()
  df[col] = le.fit_transform(df[col])
  encoders[col] = le

# save encoders to pickle
with open('encoders.pkl', 'wb') as f:
  pickle.dump(encoders, f)

df.head()

"""# Train test split"""

X = df.drop(columns=["Churn"])
y = df["Churn"]

# splitting data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

y_train.shape

y_train.value_counts()

"""Imbalanced data

# Synthetic Minority Oversampling Technique (SMOTE)
"""

smote = SMOTE()

X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)

print(X_train_smote.shape)
print(y_train_smote.shape)

# Dictionary of Models
models = {
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest": RandomForestClassifier(random_state=42),
    "XGBoost": XGBRFClassifier(random_state=42)
}

# dictionary to store cross validation scores
cv_scores = {}

for model_name, model in models.items():
  cv_score = cross_val_score(model, X_train_smote, y_train_smote, cv=5)
  cv_scores[model_name] = cv_score
  print(f"{model_name} CV Score: {cv_score.mean()}")

cv_scores

"""Random Forest giving highest accuracy"""

rfc = RandomForestClassifier(random_state=42)

rfc.fit(X_train_smote, y_train_smote)

"""# Model Evaluation"""

y_test_pred = rfc.predict(X_test)

print("Accuracy Score :", accuracy_score(y_test, y_test_pred))

print("Confusion Matrix :","\n", confusion_matrix(y_test, y_test_pred))

print("Classification Report :","\n", classification_report(y_test, y_test_pred))

# Save model in pickle file

model_data = {"model_name":rfc, "features_names":X.columns.to_list()}

with open('model.pkl', 'wb') as f:
  pickle.dump(model_data, f)

# Load the Saved Model and build a predictive system

with open('model.pkl', 'rb') as f:
  model_data = pickle.load(f)

with open('encoders.pkl', 'rb') as f:
  encoders = pickle.load(f)

loaded_model = model_data["model_name"]
features_names = model_data["features_names"]

print(loaded_model)
print(features_names)

print(encoders)

# test example
# correct prediction is No
example = ['Female',	'0',	'Yes',	'No',	'1',	'No',	'No phone service',	'DSL',	'No',	'Yes',	'No',	'No',	'No',	'No',	'Month-to-month',	'Yes',	'Electronic check',	'29.85',	'29.85']
len(example)

input_data_df = pd.DataFrame([example], columns=features_names)

input_data_df.head()

# encode categorical features using the saved encoders
for col, encoder in encoders.items():
  if col == "Churn":
    continue
  input_data_df[col] = encoder.transform(input_data_df[col])

input_data_df.head()

prediction = loaded_model.predict(input_data_df)

print(prediction)

if prediction[0] == 0:
  print("Customer will not churn")
else:
  print("Customer will churn")

prediction_prob = loaded_model.predict_proba(input_data_df)

print(prediction_prob)

